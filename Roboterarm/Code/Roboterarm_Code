/*Modul: Embedded Systems 1
 *Projekt: Dynamixel Roboterarm (2x AX-12, 2x Mx64-AT, 2x MX-28)
 *Autor: Julian Osterloh & Max Bruder
 *Open Source
 *Datum: 17.03.2024
 */


#include <ax12.h> 
#include <Arduino.h>
#include <BioloidController.h>
#include <dynamixel_mx.h>


int Modus = 0;                                                  //Initialisierung der Variable "Modus" 

void setup() {                                                  //Funktion "setup" wird erstellt; läuft nur zu Programmstart durch
  Serial.begin(9600);                                           //Öffnet die serielle Schnittstelle und stellt die Datenrate auf 9600 Bit/s ein
  Serial.println("#### Serial Communication Established.");     //Ausgabe in neuer Zeile
  checkVoltage();                                               //Aufruf der Funktion "checkVoltage()"
  Serial.println("Gib 'r' oder 'R' ein wenn du bereit bist.");  //Ausgabe in neuer Zeile
  while(!isReady());                                            //Warten das die Funktion "isReady" true zurück gibt 
  ensureServoInJointMode();                                     //Aufruf der Funktion "ensureServoInJointMode()" um alle Motoren in den Jointmode zu setzen
  setgoalspeed();                                               //Aufruf der Funktion "setgoalspeed()"
  Objektposition();                                             //Aufruf der Funktion "Objektposition()"
}

void loop() {
  // put your main code here, to run repeatedly: leer
}


int Objektposition() {                                          //Funktion "Objektposition()" wird erstellt
  delay(500);                                                  //1000 ms also 1 s warten
  Modus = 1;                                                    //Variable Modus erhält den Wert "1"
  moveToStartposition();                                        //Aufruf der Funktion "moveToStartposition()"
  Serial.println(" Bitte geben Sie die Objektposition an:");    //Ausgabe in neuer Zeile: Eingabeaufforderung für die Objektposition
  while (!posit());                                             //Warten das die Funktion "posit" true zurück gibt = eingegebene Position wurde erreicht
  Zielposition();                                               //Aufruf der Funktion "Zielposition()"
}

int Zielposition() {                                            //Funktion "Zielposition()" wird erstellt
  delay(500);                                                  
  Modus = 2;                                                    //Variable Modus erhält den Wert "2"
  moveToStartposition();                                        
  Serial.println(" Bitte geben Sie die Zielposition an:");      //Ausgabe in neuer Zeile: Eingabeaufforderung für die Zielposition
  while (!posit());
  Objektposition();
}

boolean posit() {                                               //Funktion "posit()" wird erstellt
  int Objektpos = Serial.read();                                //Einlesen des Wertes, der in der Funktion "Objektposition()", nach der Eingabeaufforderung eingegeben wird. Diesen Wert erhält die Variable "Objektpos".
  int OP = Objektpos - 48;                                      //Umrechnen des Wertes für die Objektposition 
  if (OP == 1 || OP == 2 || OP == 3 || OP == 4 || OP == 5 || OP == 6 || OP == 7 || OP == 8 ) {  //Wenn eingegebener Wert zw. 1 und 8 liegt...
    switch (OP){                                                                                //...dann switch case
      case 1 :                                                                                  //je nach eingebenen Wert, wird die Funktion der jeweiligen Position aufgerufen
       moveToPosition1();                                       //Aufruf der Funktion "moveToPosition1()"
       return true;                                             //Rückgabewert "true" = Position wurde erfolgreich abgefahren
       break;
      case 2 :
       moveToPosition2();                                       //Aufruf der Funktion "moveToPosition2()"
       return true;
       break;
      case 3 :
       moveToPosition3();                                       //Aufruf der Funktion "moveToPosition3()"
       return true;
       break;
      case 4 :
       moveToPosition4();                                       //Aufruf der Funktion "moveToPosition4()"
       return true;
       break;
      case 5 :
       moveToPosition5();                                       //Aufruf der Funktion "moveToPosition5()"
       return true;
       break;
      case 6 :
       moveToPosition6();                                       //Aufruf der Funktion "moveToPosition6()"
       return true;
       break;
      case 7 :
       moveToPosition7();                                       //Aufruf der Funktion "moveToPosition7()"
       return true;
       break;
      case 8 :
       moveToPosition8();                                       //Aufruf der Funktion "moveToPosition8()"
       return true;
       break;
      default :
       Serial.println("Ihre Eingabe konnte nicht erkannt werden."); 
       return false;                                            //Rückgabewert false
  }
  }
  return false;                                                 
}


int moveToStartposition(){                                      //Funktion "moveToStartposition()" wird erstellt
  dxlSetGoalPosition(2, 2066);                                  //Funktion "dxlSetGoalPosition(ServoID, Goalposition)" aus ax12.h wird aufgerufen 
  while(dxlGetMoving(2)){                                       //warten bis Servo sich nicht mehr bewegt mit der "dxlGetMoving(ServoID)" Funktion aus ax12.h
  delay(500);
  }
  dxlSetGoalPosition(3,3110);
  while(dxlGetMoving(3)){
  delay(500);
  }
  dxlSetGoalPosition(4, 2022);
  while(dxlGetMoving(4)){
  delay(500);
  }
  dxlSetGoalPosition(5, 534);
  while(dxlGetMoving(5)){
  delay(500);
  }
  if (Modus == 1) {                                             //Wenn Modus 1, also in Objektposition() ist, so öffnet sich die Hand bzw. Greifzange
  dxlSetGoalPosition(6, 520);
  while(dxlGetMoving(6)){
  delay(500);
  }
  }
  dxlSetGoalPosition(1, 1534);
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Startposition");
  int servoID;                                                  //Initialisierung der Integer Variable "servoID"
  displayServoPosition(servoID);                                //Die Positionen der Servos werden mit der Funktion "displayServoPosition(servoID)" ausgegeben: dient der Driftbestimmung
}


int Armbewegung(){                                              //Funktion "Armbewegung()" wird erstellt
  dxlSetGoalPosition(4, 3333);                                  //Arm beugt sich runter Richtung Bauteil
  while(dxlGetMoving(4)){
  delay(500);
  }
  dxlSetGoalPosition(3, 1400);
  while(dxlGetMoving(3)){
  delay(500);
  }
  dxlSetGoalPosition(2, 2600);
  while(dxlGetMoving(2)){
  delay(500);
  }
  int numberofservos = 3;
  int servopositions[numberofservos][2] = {
  {2, 2600},
  {3, 1500},
  {4, 3033}};
  dxlSyncWritePosition(servopositions, numberofservos);         //Arm fährt vor zum Bauteil, mit der Funktion "dxlSyncWritePosition(servopositions, numberofservos)" aus ax12.h werden die Motoren 2, 3, und 4 synchron bewegt
  while(dxlGetMoving(2)){
  delay(500);
  }
  while(dxlGetMoving(3)){
  delay(500);
  }
  while(dxlGetMoving(4)){
  delay(500);
  }
  if (Modus == 1) {                                             //Je nach Modus greift der Arm zu (Modus 1)...
  dxlSetGoalPosition(6, 696);
  while(dxlGetMoving(6)){
  delay(500);
  }
  }
  if (Modus == 2) {                                             //..oder öffnet sich (Modus 2)
  dxlSetGoalPosition(6, 520);
  while(dxlGetMoving(6)){
  delay(500);
  }
  }
  int servopositions1[numberofservos][2] = {                    
  {4, 3033},
  {3, 1500},
  {2, 2600}};
  dxlSyncWritePosition(servopositions1, numberofservos);        //Arm fährt mit / oder ohne Bauteil zurück
  while(dxlGetMoving(4)){
  delay(500);
  }
  while(dxlGetMoving(3)){
  delay(500);
  }
  while(dxlGetMoving(2)){
  delay(500);
  }
  int servoID;
  displayServoPosition(servoID);                                
}



void moveToPosition1(){                                         //Funktion "moveToPosition1()" wird deklariert
  dxlSetGoalPosition(1, 1022);
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Position 1");
  Armbewegung();                                                //Aufruf der Funktion "Armbewegung()"
}


void moveToPosition2(){                                         //Funktion "moveToPosition2()" wird deklariert
  dxlSetGoalPosition(1, 510);
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Position 2");
  Armbewegung();

}


void moveToPosition3(){                                         //Funktion "moveToPosition3()" wird deklariert
  dxlSetGoalPosition(1, 20);
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Position 3");
  Armbewegung();
}


void moveToPosition4(){                                         //Funktion "moveToPosition4()" wird deklariert
  dxlSetGoalPosition(1, 3578);
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Position 4");
  Armbewegung();
}


void moveToPosition5(){                                         //Funktion "moveToPosition5()" wird deklariert
  dxlSetGoalPosition(1,3067 );
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Position 5");
  Armbewegung();
}


void moveToPosition6(){                                         //Funktion "moveToPosition6()" wird deklariert
  dxlSetGoalPosition(1, 2555);
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Position 6");
  Armbewegung();
}


void moveToPosition7(){                                         //Funktion "moveToPosition7()" wird deklariert
  dxlSetGoalPosition(1, 2043);
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Position 7");
  Armbewegung();
}


void moveToPosition8(){                                         //Funktion "moveToPosition8()" wird deklariert
  dxlSetGoalPosition(1, 1534);
  while(dxlGetMoving(1)){
  delay(500);
  }
  Serial.println ("Position 8");
  Armbewegung();
}

int displayServoPosition(int servoID){                          //Funktion "displayServoPosition(int servoID)" wird deklariert
    Serial.println("------------------------------------------");
  for( int servoID = 1; servoID < 7; servoID++){                //Variable "servoID" wird von 1 bis 6 hochgezählt
    Serial.print("Servo ");
    Serial.print(servoID);                                      
    Serial.print(" ist an Position ");
    Serial.println(getServoPosition(servoID));                  //Ausgabe der Servoposition, indem die Funktion "getServoPosition(servoID)" aufgerufen wird
}
}

int getServoPosition(int servoID){                              //Funktion "displayServoPosition(int servoID)" wird deklariert
  int position;                                               
  for( int i = 1; i < 7; i++){
    position = dxlGetPosition(servoID);                         //Mit Befehl "dxlGetPostion(servoID)", aus ax12.h, wird die Position des jeweiligen Servos erfasst
    servoID = servoID++;                                        //Hochzählen der servoID für den nächsten for-Schleifendurchlauf
    if(position > -1){
      return position;                                          
    }
  }
  Serial.print("Die Position von Servo ");                      //Ausgabe der Fehlermeldung
  Serial.print(servoID);
  Serial.print("konnte nicht gelesen werden.");
  Serial.println("Das kann passieren, bitte versuche es erneut.");
  return -1;
}

void setgoalspeed(){                                            //Für Servos werden die Bewegungsgeschwindigkeiten festgelegt
  dxlSetGoalSpeed(1, 97);                                       //Mit Befehl "dxlSetGoalSpeed(ServoID, speedValue)", aus ax12.h, werden die Bewegungsgeschwindigkeiten festgelegt
  dxlSetGoalSpeed(2, 97); 
  dxlSetGoalSpeed(3, 97); 
  dxlSetGoalSpeed(4, 97); 
  dxlSetGoalSpeed(5, 97); 
  dxlSetGoalSpeed(6, 97);                                                  
}
  

 boolean isReady(){                                             //Funktion "isReady()" wird deklariert
  delay(500); 
  if(Serial.available() == 0) {
    return false;}
  int inByte = Serial.read();
  if(inByte == 'r' || inByte == 'R'){                           //Mit der Eingabe von 'r' oder 'R' bestätigt der Nutzer, dass das Programm starten kann und er bereit ist
    return true;                                                //True = Nutzer ist bereit
  }
  return false;                                                 //False = Nutzer ist nicht bereit
}



void ensureServoInJointMode(){                                  //Funktion "ensureServoInJointMode()" wird deklariert
  int ServoIDAX[] = {1, 5, 6};
  int ServoIDMX[] = {2, 3, 4};
  int minPositionAX = 0;
  int maxPositionAX = 1023;
  int minPositionMX = 0;
  int maxPositionMX = 4096;
  if (dxlGetMode(ServoIDAX) == 1){
      Serial.println("AX Servos sind bereits im Jointmode.");
      dxlSetJointMode(ServoIDAX, minPositionAX, maxPositionAX); //Mit Befehl "dxlSetJointMode(ServoID´s, minPosition, maxPosition)", aus ax12.h, werden die AX - und MX - Servos in den Jointmode gesetzt
      return;   
  }
  Serial.println("Die AX Servos werden in den Jointmode gesetzt."); 
  dxlSetJointMode(ServoIDAX, minPositionAX, maxPositionAX); 
  
  if (dxlGetMode(ServoIDMX) == 1){
      Serial.println("MX Servos sind bereits im Jointmode.");
      dxlSetJointMode(ServoIDMX, minPositionMX, maxPositionMX); 
      return;   
  }
  Serial.println("Die AX Servos werden in den Jointmode gesetzt."); 
  dxlSetJointMode(ServoIDMX, minPositionMX, maxPositionMX); 
}



void checkVoltage(){                                            //Funktion "checkVoltage()" wird deklariert
  int ServoID[] = {1, 2, 3, 4, 5, 6};
  float voltage = dxlGetSystemVoltage(6, ServoID);              //Mit Befehl "dxlGetSystemVoltage(NumberofServos, ServoID)", aus ax12.h, wird die Betriebsspannung der Servos erfasst
  Serial.print ("##### System Voltage: ");                      //Ausgabe der Betriebsspannung
  Serial.print (voltage);
  Serial.println (" Volt.");
  if (voltage >= 10.0){                                         //Wenn Betriebsspannung über 10V dann kann das Programm starten....
    Serial.println("ALLES GUT: Spannung ist ueber 10 V");
    return;
  }
  Serial.println("PROBLEM: Spannung ist unter 10 V");
  Serial.println("DANGER if you are using LiPO batteries!!!");
  Serial.println("Programm wurde gestoppt.");                   //...sosnt nicht
}
